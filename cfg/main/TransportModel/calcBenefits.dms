container calcBenefits: using = "getInbetweens;PopulationModels;AdditionFlowSchemes;"
{
	
	//parameter<string> line: expr = "'BaseFlows/TotalFlows/Flows;' + AsList('PotentialAdditions/RouteFlows/'+getInbetweens/PeriodAltSets/uniqueCode+'/TotalFlows/Flows',';')";
	container calcAllTrigger
	{
		parameter<bool> CalcAll: expr = "True", ExplicitSuppliers = "= 'BaseFlows/TotalFlows/Flows;' + AsList('PotentialAdditions/RouteFlows/'+getInbetweens/PeriodAltSets/uniqueCode+'/TotalFlows/store_all',';')";
		parameter<bool> CalcBase: expr = "True", ExplicitSuppliers = "BaseFlows/TotalFlows/Flows";
		parameter<bool> Store_Operators:= True, ExplicitSuppliers = "= AsList('PotentialAdditions/RouteFlows/'+getInbetweens/PeriodAltSets/uniqueCode+'/TotalFlows/Flows/opid', ';')";
		parameter<bool> Store_Base_Operators:= True, ExplicitSuppliers = "BaseFlows/TotalFlows/Flows/opid";
	}
	container BaseFlows
	{
		Container BaseNetwork: expr = "LocalSchemes/getBaseNetwork(params/Year)";
		
		attribute<bool> connected 			(Zones): expr = "!IsNull(rlookup(id(Zones), (point_in_polygon(BaseNetwork/Network/YearStations/centroid, Zones/vlak))))";
		parameter<uint32> ProvCapConnected					  : expr = "sum(uint32(bool(Zones/isProvhoofd) && connected))";
		
		parameter<string> routeID:			expr = "'Basenetwork'";
		parameter<string> NetworkLocation: 	expr = "'BaseNetwork/Network'";
		parameter<uint32> LineOperator:		expr = "uint32(0)";
		
		Container InteractionModel: 	expr = "getInteractionModel(BaseNetwork/Network)";
		Container NetworkAllocation: 	expr = "doAllocateFlows(BaseNetwork/Network, InteractionModel/FlowMatrix)";
		Container TotalFlows: expr = "getTotalFlows(BaseNetwork/Network)";
		Container AccessibilityLevels: 	expr = "AdditionFlowSchemes/getAccessibility(BaseNetwork/Network)";						
	}
		
	container PotentialAdditions
	{
		container RouteFlows : expr = "for_each_ne(getInbetweens/PeriodAltSets/uniqueCode, "
			"'AdditionFlowSchemes/getRouteFlows(' + quote(getInbetweens/PeriodAltSets/uniqueCode) + "
				"', ' + quote('PotentialAdditions/RouteFlows/') + "
				"', AltRoutes/' + getInbetweens/PeriodAltSets/uniqueCode + "
				"', BaseFlows/BaseNetwork)')";
		
		container AccessibilityLevels: expr = "for_each_ne(getInbetweens/PeriodAltSets/uniqueCode, "
		"'AdditionFlowSchemes/getAccessibility(RouteFlows/' +  getInbetweens/PeriodAltSets/uniqueCode + '/Network)')";			
	}
			
	container LocalSchemes
	{
		container getBaseNetwork: IsTemplate = "True", Using = "SourceData/RailRoads;"
		{
			parameter<uint16> year;
			
			unit<uint32> ZonesRef: expr = "PopulationModels/Population";
			unit<uint32> YearNet: expr = "StartNet/WholeNetwork";
			
			unit<uint32> Network:
				KeepData = "True",
				FreeData = "False",
				DialogData = "UnionData",
				DialogType = "Map",
				Expr       = "YearNet"
			{
				attribute<point_rd> UnionData(arc): expr = "YearNet/line";
				attribute<uint32> 	id: 			expr = "id(Network)";			
				attribute<point_rd> first_point: 	expr = "first_point(UnionData)";
				attribute<point_rd> last_point:  	expr = "last_point(UnionData)";	
				attribute<m>       	length: 		expr = "arc_length(UnionData, m)";												
				attribute<s> 		Seconds: 		expr = "YearNet/Seconds +  (float32(ConnectsRail) * (Params/WaitingSeconds / 2f))";
				attribute<float32>	Speed:			expr = "(length / 1000f) / (Minutes / 60f)";
				attribute<float32>	Minutes:		expr = "Seconds / float32(60)";
				attribute<bool>		IsRail:			expr = "YearNet/IsRail";	
				attribute<bool>		ConnectsRail:= (NodeSet/ConnectsRail[F1] || NodeSet/ConnectsRail[F2]) && !IsRail;
				attribute<bool>		IsAddition:		expr = "const(False, Network, bool)";
				//attribute<bool>		IsBridge:		expr = "YearNet/IsBridge";
				attribute<uint32>	OperatorId:		expr = "YearNet/OpNum";
				//attribute<uint32>	InitiatorId:	expr = "YearNet/InitiatorId";
				attribute<uint32>	ContiguousRail:	expr = "getContiguousParts/RailLines/PartId[rlookup(id, getContiguousParts/RailLines/Nr_OrgEntity)]";
				attribute<CRParts>	CRParts_id:		expr = "rlookup(ContiguousRail, CRParts/Values)";
				parameter<uint32>	MaxContiguous:	expr = "max(ContiguousRail)";				
				
				unit<uint32> PointSet: expr = "union_unit(Network, Network)"
				{
					attribute<point_rd> point:   expr = "union_data(PointSet, Network/first_point, Network/last_point)";
					attribute<NodeSet>	Node:	 expr = "rlookup(point, NodeSet/Values)";
					attribute<bool>		onRail:	 expr = "union_data(., Network/IsRail, Network/IsRail)";		
				}
				
				unit<uint32> NodeSet: expr       = "unique(PointSet/point)", DialogData = "Values", DialogType = "Map" { 
					attribute<point_rd> Values; attribute<uint32> Count: expr = "pcount(PointSet/Node)"; 
					attribute<bool> OnRail: expr = "PointSet/onRail[rlookup(Values, PointSet/point)]";
					attribute<bool> ConnectsRail:= any(IsRail, F1) || any(IsRail, F2);		
				}		
				
				unit<uint32> YearStations: expr = "subset(NodeSet/OnRail)", DialogData = "centroid", DialogType = "map"
				{ attribute<point_rd> centroid:		expr = "NodeSet/Values[Nr_OrgEntity]"; attribute<NodeSet> NetRef:	expr = "Nr_OrgEntity";	}
				
				unit<uint32> CRParts:	expr = "unique(ContiguousRail)"
				{ attribute<uint32>	Values; }
				
				attribute<NodeSet> F1	(Network): 			expr = "rlookup(Network/first_point, NodeSet/Values)";
				attribute<NodeSet> F2	(Network): 			expr = "rlookup(Network/last_point,  NodeSet/Values)";	
				attribute<NodeSet> Zones(ZonesRef): 		expr = "rlookup(ZonesRef/centroid, NodeSet/Values)";
			}
			Container nodes_p_operator: expr = "for_each_ne(id(Operators/Operators) > 0 ? Operators/Operators/Label : '', 'getOperatorNet('+ string(id(Operators/Operators)) +')')";
			Container getContiguousParts
			{
				unit<uint32> RailLines: expr = "subset(YearNet/IsRail)", DialogData = "line", DialogType = "map"
				{
					attribute<RailLines>Rl_id:			expr = "id(RailLines)";
					attribute<float32>	PercId:			expr = "float32(Rl_id) / (float32(max(Rl_id) + uint32(1)))";
					attribute<point_rd> line(arc):		expr = "YearNet/line[Nr_OrgEntity]";
					attribute<point_rd> first_point: 	expr = "first_point(line)";
					attribute<point_rd> last_point:  	expr = "last_point(line)";
					attribute<Networks>	PartId:			expr = "Networks/PartNr[F1]";
					unit<uint32> PointSet: 				expr = "union_unit(RailLines, RailLines)"
					{
						attribute<point_rd> 	point:  expr = "union_data(PointSet, RailLines/first_point, RailLines/last_point)";
						attribute<float32>		U_Node:	expr = "union_data(PointSet, RailLines/U_NodeNum_first, RailLines/U_NodeNum_last)";
						attribute<NodeSet_1>	Node_1:	expr = "rlookup(point, NodeSet_1/Values)";
						attribute<NodeSet_2>	Node_2:	expr = "rlookup(U_Node, NodeSet_2/Values)";
					}
					unit<uint32> NodeSet_1: 			expr  = "unique(PointSet/point)", DialogData = "Values", DialogType = "Map"
					{ 
						attribute<point_rd> Values; 
						attribute<uint32> 	Count: 		expr = "pcount(PointSet/Node_1)";
					}
					unit<uint32> NodeSet_2:				expr = "unique(PointSet/U_Node)"
					{ 	
						attribute<float32>	Values; 
						attribute<uint32> 	Count: 		expr = "pcount(PointSet/Node_2)";
					}
					attribute<NodeSet_1> NodeSet_1_first(RailLines): expr = "rlookup(RailLines/first_point, NodeSet_1/Values)";
					attribute<float32> U_NodeNum_first	(RailLines): 
						expr = "iif(NodeSet_1/Count[NodeSet_1_first] > uint32(2), float32(NodeSet_1_first) + percId, float32(NodeSet_1_first))";
					attribute<NodeSet_1> NodeSet_1_last	(RailLines): expr = "rlookup(RailLines/last_point,  NodeSet_1/Values)";
					attribute<float32> U_NodeNum_last	(RailLines): 
						expr = "iif(NodeSet_1/Count[NodeSet_1_last] > uint32(2), float32(NodeSet_1_last) + percId, float32(NodeSet_1_last))";
					
					attribute<NodeSet_2> F1 			(RailLines): expr = "rlookup(U_NodeNum_first, NodeSet_2/Values)";
					attribute<NodeSet_2> F2 			(RailLines): expr = "rlookup(U_NodeNum_last, NodeSet_2/Values)";
					
					unit<uint32> Networks: expr = "connected_parts(F1, F2)"
					{ 
						attribute<Networks>	id:			expr = "id(Networks)";
						attribute<uint32> nrId: 		expr = "pcount(Partnr)"; 
					}	
				}
			}
		}
			
			Container getOperatorNet: IsTemplate = "True"
			{
				parameter<uint32> OpNum;
				
				unit<uint32> OperatorNet: expr = "subset(Network/OperatorId = OpNum)"
				{
					attribute<point_rd> line (arc): expr = "Network/line[Nr_OrgEntity]"; attribute<point_rd> first_point: 	expr = "first_point(line)"; attribute<point_rd> last_point:  	expr = "last_point(line)";
					unit<uint32> PointSet: 	expr = "union_unit(OperatorNet, OperatorNet)" {attribute<point_rd> points: expr = "union_data(., first_point, last_point)";}
					unit<uint32> NodeSet: 	expr = "unique(PointSet/points)" {attribute<point_rd> Values;}
				}
			}
	}
}
